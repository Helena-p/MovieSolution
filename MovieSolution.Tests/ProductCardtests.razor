@inherits TestContext;
@using MovieSolution;
@using MovieSolution.Models;
@using MovieSolution.Shared.Components;


@code {
    private ProductModel CreateProductModel()
    {
        return new ProductModel
            {
                Id = 1,
                Title = "Title",
                Description = "A short description",
                Director = "A name",
                ImageURL = "https://someurl",
                Price = 7,
                ReleaseYear = 2000,
                CategoryId = 1,
                CategoryName = "Comedy"
            };
    }

    [Fact]
    public void ProductCard_RendersCorrectly_Test()
    {
        // Arrange
        var product = CreateProductModel();
        // Act
        var cut = RenderComponent<ProductCard>(param => param.Add(p => p.Product, product));
        // Assert
        Assert.Contains("Title", cut.Markup);
        Assert.Contains("A short description", cut.Markup);
        Assert.Contains("A name", cut.Markup);
        Assert.Contains("A name", cut.Markup);
        Assert.Contains("https://someurl", cut.Markup);
        Assert.Contains("7", cut.Markup);
        Assert.Contains("2000", cut.Markup);
        Assert.Contains("Comedy", cut.Markup);
    }

    [Fact]
    public void ProductCard_HyperLinkMarkup_Test()
    {
        // Arrange
        var expectedURL = "products/1";
        var product = CreateProductModel();

        // Act
        var cut = RenderComponent<ProductCard>(param => param.Add(p => p.Product, product));
        var anchorElement = cut.Find("a");
        var href = anchorElement.GetAttribute("href");

        // Assert
        Assert.Equal(expectedURL, href);
    }
}
